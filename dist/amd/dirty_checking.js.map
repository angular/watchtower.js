{"version":3,"file":"dirty_checking.js","sources":["@traceur/generated/TemplateParser/7","dirty_checking.js","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/12","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"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","sourcesContent":["define($__placeholder__0, $__placeholder__1);","import {\n  ChangeDetector,\n  ChangeDetectorGroup,\n  ChangeRecord,\n  MapChangeRecord,\n  MapKeyValue,\n  CollectionChangeRecord,\n  CollectionChangeItem\n} from './change_detection';\n/**\n * these cannot currently be defined in the DirtyCheckingRecord class itself,\n * unfortunately. They've been moved outside and de-const-ified for this\n * reason. When a better approach is found, it will be used instead.\n */\nvar _MODE_NAMES = [\n  'MARKER', 'IDENT', 'REFLECT', 'GETTER', 'MAP[]', 'ITERABLE', 'MAP'\n];\nvar _MODE_MARKER_ = 0;\nvar _MODE_IDENTITY_ = 1;\nvar _MODE_REFLECT_ = 2;\nvar _MODE_GETTER_ = 3;\nvar _MODE_MAP_FIELD_ = 4;\nvar _MODE_ITERABLE_ = 5;\nvar _MODE_MAP_ = 6;\nvar _MODE_MAP_FIELD_NOTIFY_ONLY_= 10;\nexport class GetterCache {\n  constructor(map) {\n    this._map = map;\n  }\n  get(field) {\n    return this._map[field] || null;\n  }\n}\nexport class DirtyCheckingChangeDetectorGroup extends ChangeDetector {\n  constructor(parent, cache) {\n    this._parent = parent;\n    this._getterCache = cache;\n    this._marker = DirtyCheckingRecord.marker();\n    this._childHead = this._childTail = this._next = this._prev = null;\n    if (parent === null) {\n      this._recordHead = this._recordTail = this._marker;\n    } else {\n      this._recordTail = this._parent._childInclRecordTail;\n      this._recordHead = this._recordTail = this._recordAdd(this._marker);\n    }\n  }\n  watch(context, field, handler) {\n    // assert(_root != null); // prove that we are not deleted connected;\n    var getter = field === null ? null : this._getterCache.get(field);\n    return this._recordAdd(new DirtyCheckingRecord(this, context, field, getter, handler));\n  }\n  remove() {\n    var root = this._root;\n    // TODO: Traceur assertions\n    // assert((root = _root) != null);\n    // assert(root._assertRecordsOk());\n    var prevRecord = this._recordHead._prevRecord;\n    var nextRecord = this._childInclRecordTail._nextRecord;\n    if (prevRecord !== null) prevRecord._nextRecord = nextRecord;\n    if (nextRecord !== null) nextRecord._prevRecord = prevRecord;\n    var cursor = this._recordHead;\n    while(cursor != nextRecord) {\n      cursor = cursor._nextRecord;\n    }\n    var prevGroup = this._prev;\n    var nextGroup = this._next;\n    if (prevGroup === null) {\n      this._parent._childHead = nextGroup;\n    } else {\n      prevGroup._next = nextGroup;\n    }\n    if (nextGroup === null) {\n      this._parent._childTail = prevGroup;\n    } else {\n      nextGroup._prev = prevGroup;\n    }\n    this._parent = null;\n    this._prev = this._next = null;\n    this._recordHead._prev = null;\n    this._recordTail._prev = null;\n    this._recordHead = this._recordTail = null;\n\n    // TODO: Traceur assertions\n    // assert(root._assertRecordsOk());\n  }\n  _recordAdd(record) {\n    var previous = this._recordTail,\n        next = previous === null ? null : previous._nextRecord;\n    record._nextRecord = next;\n    record._prevRecord = previous;\n    if (previous !== null) previous._nextRecord = record;\n    if (next !== null) next._prevRecord = record;\n    this._recordTail = record;\n    if (previous === this._marker) this._recordRemove(this._marker);\n    return record;\n  }\n  _recordRemove(record) {\n    var previous = record._prevRecord,\n        next = record._nextRecord;\n    if (record === this._recordHead && record === this._recordTail) {\n      // we are the last one, must leave marker behind.\n      this._recordHead = this._recordTail = this._marker;\n      this._marker._nextRecord = next;\n      this._marker._prevRecord = previous;\n      if (previous !== null) previous._nextRecord = this._marker;\n      if (next !== null) next._prevRecord = this._marker;\n    } else {\n      if (record === this._recordTail) this._recordTail = previous;\n      if (record === this._recordHead) this._recordHead = next;\n      if (previous !== null) previous._nextRecord = next;\n      if (next !== null) next._prevRecord = previous;\n    }\n  }\n  newGroup() {\n    // TODO: Traceur assertions\n    // assert(_root._assertRecordsOk());\n    var child = new DirtyCheckingChangeDetectorGroup(this, this._getterCache);\n    if (this._childHead === null) {\n      this._childHead = this._childTail = child;\n    } else {\n      child._prev = this._childTail;\n      this._childTail._next = child;\n      this._childTail = child;\n    }\n    // TODO: Traceur assertions\n    // assert(_root._assertRecordsOk());\n    return child;\n  }\n  get _root() {\n    var root = this, next;\n    while ((next = root._parent) !== null) {\n      root = next;\n    }\n    return (root instanceof DirtyCheckingChangeDetector) ? root : null;\n  }\n  get _childInclRecordTail() {\n    var tail = this, nextTail;\n    while ((nextTail = tail._childTail) !== null) {\n      tail = nextTail;\n    }\n    return tail._recordTail;\n  }\n  get count() {\n    var count = 0,\n        cursor = this._recordHead,\n        end = this._childInclRecordTail;\n    while (cursor !== null) {\n      if (cursor._mode !== _MODE_MARKER_) {\n        ++count;\n      }\n      if (cursor === end) break;\n      cursor = cursor._nextRecord;\n    }\n    return count;\n  }\n  toString() {\n    var lines = [],\n        record,\n        records,\n        recordTail,\n        childGroup;\n    if (this._parent === null) {\n      var allRecords = [];\n      record = this._recordHead;\n      var includeChildrenTail = this._childInclRecordTail;\n      do {\n        allRecords.push(record.toString());\n        record = record._nextRecord;\n      } while (record !== includeChildrenTail);\n      lines.push(\"FIELDS: \" + allRecords.join(', '));\n    }\n    records = [];\n    record = this._recordHead;\n    recordTail = this._recordTail;\n    while (record !== recordTail) {\n      records.push(record.toString());\n      record = record._nextRecord;\n    }\n    records.add(record.toString());\n    lines.add(\"DirtyCheckingChangeDetectorGroup(fields: \" + records.join(', ') + \")\");\n    childGroup = this._childHead;\n    while (childGroup !== null) {\n      lines.push('  ' + childGroup.toString().split('\\n').join('\\n  '));\n      childGroup = childGroup._next;\n    }\n    return lines.join('\\n');\n  }\n}\nexport class DirtyCheckingChangeDetector extends DirtyCheckingChangeDetectorGroup {\n  constructor(cache, notifier = new ChangeNotifier()) {\n    super(null, cache);\n    this._fakeHead = DirtyCheckingRecord.marker();\n    this._notifier = notifier;\n  }\n\n  _assertRecordsOk() {\n    var record = this._recordHead,\n        groups = [this],\n        group;\n    while (groups.length) {\n      group = groups.shift();\n      var childGroup = group._childTail;\n      while (childGroup !== null) {\n        groups.unshift(childGroup);\n        childGroup = childGroup._prev;\n      }\n      var groupRecord = group._recordHead,\n          groupTail = group._recordTail;\n      while (true) {\n        if (groupRecord === record) record = record._nextRecord;\n        else throw \"lost: \" + record + \" found \" + groupRecord + \"\\n\" + this;\n        if (groupRecord === groupTail) break;\n        groupRecord = groupRecord._nextRecord;\n      }\n    }\n    return true;\n  }\n  collectChanges(exceptionHandler, stopwatch) {\n    if (stopwatch) stopwatch.start();\n    var changeTail = this._fakeHead,\n        current = this._recordHead,\n        count = 0;\n    while (current !== null) {\n      try {\n        if (current.check()) {\n          changeTail = changeTail._nextChange = current;\n        }\n        ++count;\n      } catch (e) {\n        if (exceptionHandler) {\n          exceptionHandler(e);\n        } else {\n          throw e;\n        }\n      }\n      current = current._nextRecord;\n    }\n    changeTail._nextChange = null;\n    if (stopwatch) {\n      stopwatch.stop();\n      stopwatch.increment(count);\n    }\n    var changeHead = this._fakeHead._nextChange;\n    this._fakeHead._nextChange = null;\n    return new ChangeIterator(changeHead);\n  }\n  remove() {\n    throw \"Root ChangeDetector can not be removed\";\n  }\n  get _root() {\n    return this;\n  }\n}\n\nclass ChangeIterator {\n  constructor(next) {\n    this._current = null;\n    this._next = next;\n  }\n\n  get current() {\n    return this._current;\n  }\n\n  iterate() {\n    this._current = this._next;\n    if (this._next !== null) {\n      this._next = this._current._nextChange;\n\n      /**\n       * This is important to prevent memory leaks. If the nextChange record is not reset, then a\n       * record may be pointing to a deleted change detector group, and it will not release the\n       * reference until it fires again. So we have to be eager about releasing references.\n       */\n      this._current._nextChange = null;\n    }\n    return this._current !== null;\n  }\n}\n\n\nexport class ChangeNotifier {\n  constructor() {\n    this.objectRecords = new WeakMap();\n  }\n  notify(object) {\n    var records = this.objectRecords.get(object) || [];\n    records.forEach((record) => {\n      // TODO: Is this the correct way of manually dirty checking\n      // some records??\n      var watch = record._handler._watchHead;\n      if (record.check(true)) {\n        watch._dirty = true;\n      }\n      watch.invoke();\n    });\n  }\n  isNotifyOnly(object, fieldName) {\n    return false;\n  }\n  addWatch(object, fieldName, record) {\n    var records = this.objectRecords.get(object);\n    if (!records) {\n      records = [];\n      this.objectRecords.set(object, records);\n    }\n    records.push(record);\n    return records.length;\n  }\n  removeWatch(object, fieldName, record) {\n    var records = this.objectRecords.get(object);\n    if (records) {\n      var index = records.indexOf(record);\n      if (index !== -1) {\n        records.splice(index, 1);\n      }\n    }\n    return records ? records.length : 0;\n  }\n}\n\nclass DirtyCheckingRecord extends ChangeRecord {\n  constructor(group, object, fieldName, getter, handler) {\n    this._group = group;\n    this._getter = getter;\n    this._handler = handler;\n    this._field = fieldName;\n    // Do we really need reflection here?\n    // this._symbol = fieldName === null ? null : new Symbol(fieldName);\n    this.object = object;\n    this._nextRecord = this._prevRecord = this._nextChange = null;\n  }\n  static marker() {\n    var record = new DirtyCheckingRecord(null, null, null, null, null);\n    record._mode = _MODE_MARKER_;\n    return record;\n  }\n  get nextChange() {\n    return this._nextChange;\n  }\n  get field() {\n    return this._field;\n  }\n  get handler() {\n    return this._handler;\n  }\n  set handler(handler) {\n    this._handler = handler;\n  }\n  get object() {\n    return this._object;\n  }\n  _clearObject() {\n    var notifier = this._group && this._group._root._notifier;\n    if (notifier && this._object && (\n        this._mode === _MODE_MAP_FIELD_NOTIFY_ONLY_ || this._mode === _MODE_MAP_FIELD_)\n      ) {\n      notifier.removeWatch(this._object, this._field, this);\n    }\n    this._object = null;\n  }\n  set object(obj) {\n    this._clearObject(obj);\n    this._object = obj;\n    if (obj === null) {\n      this._mode = _MODE_IDENTITY_;\n      return;\n    }\n    if (this.field === null) {\n      // _instanceMirror = null; --- Again, do we need reflection?\n      if (typeof obj === \"object\") {\n        if (Array.isArray(obj)) { // TODO: Browser compat, cross-script context support, perf\n          if (this._mode !== _MODE_ITERABLE_) {\n            // Last one was collection as well, don't reset state.\n            this._mode = _MODE_ITERABLE_;\n            this.currentValue = new _CollectionChangeRecord();\n          }\n        } else if (this._mode !== _MODE_MAP_) {\n          // Last one was collection as well, don't reset state.\n          this._mode = _MODE_MAP_;\n          this.currentValue = new _MapChangeRecord();\n        }\n      } else {\n        this._mode = _MODE_IDENTITY_;\n      }\n      return;\n    }\n    if (typeof obj === \"object\") {\n      var notifier = this._group && this._group._root._notifier;\n      if (notifier && notifier.isNotifyOnly(obj, this._field)) {\n        this._mode = _MODE_MAP_FIELD_NOTIFY_ONLY_;\n      } else {\n        this._mode = _MODE_MAP_FIELD_;\n      }\n      notifier.addWatch(obj, this._field, this);\n      // _instanceMirror = null; --- Reflection needed?\n    } else if (this._getter !== null) {\n      this._mode = _MODE_GETTER_;\n      // _instanceMirror = null; --- Reflection needed?\n    } else {\n      this._mode = _MODE_REFLECT_;\n      // _instanceMirror = reflect(obj); --- I'm really not sure about this!\n    }\n  }\n  check(inNotify) {\n    // assert(_mode != null); --- Traceur v0.0.24 missing assert()\n    var current;\n    switch (this._mode) {\n      case _MODE_MARKER_: return false;\n      case _MODE_REFLECT_:\n        // TODO:\n        // I'm not sure how much support for Reflection is available in Traceur\n        // just yet, but I will look into this later...\n        // current = _instanceMirror.getField(_symbol).reflectee;\n        current = this.object[this.field];\n        break;\n      case _MODE_GETTER_:\n        current = this._getter(this.object);\n        break;\n      case _MODE_MAP_FIELD_NOTIFY_ONLY_:\n        if (inNotify) {\n          current = this.object[this.field];\n        } else {\n          return false;\n        }\n        break;\n      case _MODE_MAP_FIELD_:\n        current = this.object[this.field];\n        break;\n      case _MODE_IDENTITY_:\n        current = this.object;\n        break;\n      case _MODE_MAP_:\n      case _MODE_ITERABLE_:\n        return this.currentValue._check(this.object);\n      default:\n        throw \"UNREACHABLE\";\n        // assert(false); --- Traceur 0.0.24 missing assert()\n    }\n    var last = this.currentValue;\n    if (last !== current) {\n      // TODO:\n      // I'm fairly sure we don't have this issue in JS, with the exception of non-primitive\n      // Strings. However, I'll look into this.\n      //\n      //if (typeof last === \"string\" && typeof current === \"string\" && last === current) {\n      // This is false change in strings we need to recover, and pretend it\n      // is the same. We save the value so that next time identity will pass\n      //currentValue = current;\n      //} else\n      if (!((typeof last === \"number\" && last !== last) &&\n          (typeof current === \"number\" && current !== current))) {\n        // Ignore NaN -> NaN changes\n        this.previousValue = last;\n        this.currentValue = current;\n        return true;\n      }\n    }\n    return false;\n  }\n  remove() {\n    // TODO: This is not called when a WatchGroup is destroyed.\n    // TODO: Should also be called when a parent WatchGroup is destroyed!\n    this._clearObject();\n    this._group._recordRemove(this);\n  }\n  toString() {\n    // Where the heck is hashCode from?\n    var hashCode = 0;\n    return _MODE_NAMES[this._mode] + '[' + this.field + ']{' + hashCode + '}';\n  }\n}\nclass _MapChangeRecord extends MapChangeRecord {\n  constructor() {\n    this._records = {}; // WeakMap perhaps?\n    this._map = {};\n    this._mapHead = null;\n    this._changesHead = this._changesTail = null;\n    this._additionsHead = this._additionsTail = null;\n    this._removalsHead = this._removalsTail = null;\n  }\n  get map() {\n    return this._map;\n  }\n  get mapHead() {\n    return this._mapHead;\n  }\n  get changesHead() {\n    return this._changesHead;\n  }\n  get additionsHead() {\n    return this._additionsHead;\n  }\n  get removalsHead() {\n    return this._removalsHead;\n  }\n  get isDirty() {\n    return this._additionsHead !== null ||\n           this._changesHead !== null ||\n           this._removalsHead !== null;\n  }\n  forEachChange(fn) {\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._changesHead;\n    while (record !== null) {\n      fn(record);\n      record = record._nextChangedKeyValue;\n    }\n  }\n  forEachAddition(fn) {\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._additionsHead;\n    while (record !== null) {\n      fn(record);\n      record = record._nextAddedKeyValue;\n    }\n  }\n  forEachRemoval(fn) {\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._removalsHead;\n    while (record !== null) {\n      fn(record);\n      record = record._nextRemovedKeyValue;\n    }\n  }\n  _check(map) {\n    this._reset();\n    this._map = map;\n    var records = this._records;\n    var oldSeqRecord = this._mapHead;\n    var lastOldSeqRecord = null, lastNewSeqRecord = null;\n    var seqChanged = false;\n    // TODO: Use getOwnPropertyNames instead?\n    var keys = Object.keys(map);\n    for (var i = 0, ii = keys.length; i < ii; ++i) {\n      var key = keys[i], value = map[key], newSeqRecord = null;\n      if (oldSeqRecord !== null && key === oldSeqRecord.key) {\n        newSeqRecord = oldSeqRecord;\n        if (value !== oldSeqRecord._currentValue) {\n          var prev = oldSeqRecord._previousValue = oldSeqRecord._currentValue;\n          oldSeqRecord._currentValue = value;\n          if (!((typeof prev === \"number\" && prev !== prev) &&\n              (typeof value === \"number\" && value !== value))) {\n            // Ignore NaN -> NaN changes\n            this._addToChanges(oldSeqRecord);\n          }\n        }\n      } else {\n        seqChanged = true;\n        if (oldSeqRecord !== null) {\n          this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n          this._addToRemovals(oldSeqRecord);\n        }\n        if (records.hasOwnProperty(key)) {\n          newSeqRecord = records[key];\n        } else {\n          newSeqRecord = records[key] = new KeyValueRecord(key);\n          newSeqRecord._currentValue = value;\n          this._addToAdditions(newSeqRecord);\n        }\n      }\n      if (seqChanged) {\n        if (this._isInRemovals(newSeqRecord)) {\n          this._removeFromRemovals(newSeqRecord);\n        }\n        if (lastNewSeqRecord === null) {\n          this._mapHead = newSeqRecord;\n        } else {\n          lastNewSeqRecord._nextKeyValue = newSeqRecord;\n        }\n      }\n      lastOldSeqRecord = oldSeqRecord;\n      lastNewSeqRecord = newSeqRecord;\n      oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._nextKeyValue;\n    }\n    this._truncate(lastOldSeqRecord, oldSeqRecord);\n    return this.isDirty;\n  }\n  _reset() {\n    var record = this._changesHead,\n        nextRecord;\n    while (record !== null) {\n      nextRecord = record._nextChangedKeyValue;\n      record._previousValue = record._currentValue;\n      record._nextChangedKeyValue = null;\n      record = nextRecord;\n    }\n    record = this._additionsHead;\n    while (record !== null) {\n      nextRecord = record._nextAddedKeyValue;\n      record._previousValue = record._currentValue;\n      record._nextAddedKeyValue = null;\n      record = nextRecord;\n    }\n    record = this._removalsHead;\n    while (record !== null) {\n      nextRecord = record._nextRemovedKeyValue;\n      record._nextRemovedKeyValue = null;\n      record = nextRecord;\n    }\n    this._changesHead = this._changesTail = null;\n    this._additionsHead = this._additionsTail = null;\n    this._removalsHead = this._removalsTail = null;\n  }\n  _truncate(lastRecord, record) {\n    while (record !== null) {\n      if (lastRecord === null) {\n        this._mapHead = null;\n      } else {\n        lastRecord._nextKeyValue = null;\n      }\n      var nextRecord = record._nextKeyValue;\n      record._nextKeyValue = null;\n      this._addToRemovals(record);\n      lastRecord = record;\n      record = nextRecord;\n    }\n    record = this._removalsHead;\n    while (record !== null) {\n      record._previousValue = record._currentValue;\n      record._currentValue = null;\n      delete this._records[record.key];\n      record = record._nextRemovedKeyValue;\n    }\n  }\n  _isInRemovals(record) {\n    return record === this._removalsHead ||\n           record._nextRemovedKeyValue !== null ||\n           record._prevRemovedKeyValue !== null;\n  }\n  _addToRemovals(record) {\n    // TODO: traceur assertions\n    // assert(record._nextKeyValue === null);\n    // assert(record._nextAddedKeyValue === null);\n    // assert(record._nextChangedKeyValue === null);\n    // assert(record._nextRemovedKeyValue === null);\n    // assert(record._prevRemovedKeyValue === null);\n    if (this._removalsHead === null) {\n      this._removalsHead = this._removalsTail = record;\n    } else {\n      this._removalsTail._nextRemovedKeyValue = record;\n      record._prevRemovedKeyValue = this._removalsTail;\n      this._removalsTail = record;\n    }\n  }\n  _removeFromSeq(prev, record) {\n    var next = record._nextKeyValue;\n    if (prev === null) {\n      this._mapHead = next;\n    } else {\n      prev._nextKeyValue = next;\n    }\n    record._nextKeyValue = null;\n  }\n  _removeFromRemovals(record) {\n    // TODO: traceur assertions\n    // assert(record._nextKeyValue === null)\n    // assert(record._nextAddedKeyValue === null)\n    // assert(record._nextChangedKeyValue === null)\n    var prev = record._prevRemovedKeyValue,\n        next = record._nextRemovedKeyValue;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemovedKeyValue = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemovedKeyValue = prev;\n    }\n    record._prevRemovedKeyValue = record._nextRemovedKeyValue = null;\n  }\n  _addToAdditions(record) {\n    // TODO: traceur assertions\n    // assert(record._nextKeyValue === null)\n    // assert(record._nextAddedKeyValue === null)\n    // assert(record._nextChangedKeyValue === null)\n    // assert(record._nextRemovedKeyValue === null)\n    // assert(record._prevRemovedKeyValue === null)\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail._nextAddedKeyValue = record;\n      this._additionsTail = record;\n    }\n  }\n  _addToChanges(record) {\n    // TODO: traceur assertions\n    // assert(record._nextAddedKeyValue === null)\n    // assert(record._nextChangedKeyValue === null)\n    // assert(record._nextRemovedKeyValue === null)\n    // assert(record._prevRemovedKeyValue === null)\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail._nextChangedKeyValue = record;\n      this._changesTail = record;\n    }\n  }\n}\nclass KeyValueRecord extends MapKeyValue {\n  constructor(key) {\n    this._key = key;\n    this._previousValue = this._currentValue = null;\n    this._nextKeyValue = this._nextAddedKeyValue = this._nextChangedKeyValue = null;\n    this._nextRemovedKeyValue = this._prevRemovedKeyValue = null;\n  }\n  get key() {\n    return this._key;\n  }\n  get previousValue() {\n    return this._previousValue;\n  }\n  get currentValue() {\n    return this._currentValue;\n  }\n  get nextKeyValue() {\n    return this._nextKeyValue;\n  }\n  get nextAddedKeyValue() {\n    return this._nextAddedKeyValue;\n  }\n  get nextRemovedKeyValue() {\n    return this._nextRemovedKeyValue;\n  }\n  get nextChangedKeyValue() {\n    return this._nextChangedKeyValue;\n  }\n  toString() {\n    return this._previousValue === this._currentValue\n          ? this._key\n          : this._key + '[' + this._previousValue + ' -> ' + this._currentValue + ']';\n  }\n}\nclass _CollectionChangeRecord extends CollectionChangeRecord {\n  constructor() {\n    this._iterable = null;\n    this._items = new DuplicateMap();\n    this._removedItems = new DuplicateMap();\n    this._collectionHead = this._collectionTail = null;\n    this._additionsHead = this._additionsTail = null;\n    this._movesHead = this._movesTail = null;\n    this._removalsHead = this._removalsTail = null;\n  }\n  get collectionHead() {\n    return this._collectionHead;\n  }\n  get additionsHead() {\n    return this._additionsHead;\n  }\n  get movesHead() {\n    return this._movesHead;\n  }\n  get removalsHead() {\n    return this._removalsHead;\n  }\n  forEachAddition(fn){\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._additionsHead;\n    while(record !== null) {\n      fn(record);\n      record = record._nextAddedRec;\n    }\n  }\n  forEachMove(fn) {\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._movesHead;\n    while(record !== null) {\n      fn(record);\n      record = record._nextMovedRec;\n    }\n  }\n  forEachRemoval(fn){\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._removalsHead;\n    while(record !== null) {\n      fn(record);\n      record = record._nextRemovedRec;\n    }\n  }\n  get iterable() {\n    return this._iterable;\n  }\n  _check(collection) {\n    this._reset();\n    var record = this._collectionHead,\n        maybeDirty = false,\n        index,\n        end,\n        item;\n    // TODO: Optimization for frozen arrays / sets / iteratables\n    // if ((collection is UnmodifiableListView) && identical(_iterable, collection)) {\n      // Short circuit and assume that the list has not been modified.\n    //  return false;\n    // }\n    if (Array.isArray(collection)) {\n      // TODO:\n      // Is a separate branch for Array really needed, if the object is known to be\n      // iterable? In the current implementation, the other branch will never be\n      // executed, so this shouldn't hurt. But it also causes problems for other\n      // ES6 iterable types (using generators or custom iterators)\n      var list = collection;\n      for (index = 0, end = list.length; index < end; index++) {\n        item = list[index];\n        if (record === null || item !== record.item) {\n          record = this.mismatch(record, item, index);\n          maybeDirty = true;\n        } else if (maybeDirty) {\n          // TODO(misko): can we limit this to duplicates only?\n          record = this.verifyReinsertion(record, item, index);\n        }\n        record = record._nextRec;\n      }\n    } else {\n      index = 0;\n      for (item in collection) {\n        if (record === null || item !== record.item) {\n          record = this.mismatch(record, item, index);\n          maybeDirty = true;\n        } else if (maybeDirty) {\n          // TODO(misko): can we limit this to duplicates only?\n          record = this.verifyReinsertion(record, item, index);\n        }\n        record = record._nextRec;\n        index++;\n      }\n    }\n    this._truncate(record);\n    this._iterable = collection;\n    return this.isDirty;\n  }\n  /**\n   * Reset the state of the change objects to show no changes. This means set\n   * previousKey to currentKey, and clear all of the queues (additions, moves,\n   * removals).\n   */\n  _reset() {\n    var record;\n    record = this._additionsHead;\n    while(record !== null) {\n      record.previousIndex = record.currentIndex;\n      record = record._nextAddedRec;\n    }\n    this._additionsHead = this._additionsTail = null;\n    record = this._movesHead;\n    while(record !== null) {\n      record.previousIndex = record.currentIndex;\n      var nextRecord = record._nextMovedRec;\n      // wat.\n      // assert((record._nextMovedRec = null) == null);\n      record._nextMovedRec = null;\n      record = nextRecord;\n    }\n    this._movesHead = this._movesTail = null;\n    this._removalsHead = this._removalsTail = null;\n    // TODO: Traceur assertions\n    // assert(isDirty == false);\n  }\n  /**\n   * A [_CollectionChangeRecord] is considered dirty if it has additions, moves\n   * or removals.\n   */\n  get isDirty() {\n    return this._additionsHead !== null ||\n           this._movesHead !== null ||\n           this._removalsHead !== null;\n  }\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - [record] is the record which we saw at this position last time. If `null`\n   *   then it is a new item.\n   * - [item] is the current item in the collection\n   * - [index] is the position of the item in the collection\n   */\n  mismatch(record, item, index) {\n    // Guard against bogus String changes\n    if (record !== null) {\n      //if (item is String && record.item is String && record.item == item) {\n      // TODO: This probably doesn't matter in ES6, with the exception of non-primitive Strings.\n      // Figure out a solution for these...\n      if (typeof item === \"string\" && typeof record.item === \"string\" && record.item === item) {\n        // this is false change in strings we need to recover, and pretend it is\n        // the same. We save the value so that next time identity can pass\n        record.item = item;\n        return record;\n      }\n      if ((typeof item === \"number\" && item !== item) &&\n          (typeof record.item === \"number\" && record.item !== record.item)) {\n        // we need this for JavaScript since in JS NaN !== NaN.\n        return record;\n      }\n    }\n    // find the previous record so that we know where to insert after.\n    var prev = record === null ? this._collectionTail : record._prevRec;\n    // Remove the record from the collection since we know it does not match the\n    // item.\n    if (record !== null) this._collection_remove(record);\n    // Attempt to see if we have seen the item before.\n    record = this._items.get(item, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      this._collection_moveAfter(record, prev, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._removedItems.get(item);\n      if (record !== null) {\n        // It is an item which we have earlier evict it, reinsert it back into\n        // the list.\n        this._collection_reinsertAfter(record, prev, index);\n      } else {\n        // It is a new item add it.\n        record = this._collection_addAfter(new ItemRecord(item), prev, index);\n      }\n    }\n    return record;\n  }\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit\n   * of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if\n   * the item type may have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it\n   * will be reinserted at the end. Which will show up as the two 'a's switching\n   * position. This is incorrect, since a better way to think of it is as insert\n   * of 'b' rather then switch 'a' with 'b' and then add 'a' at the end.\n   */\n  verifyReinsertion(record, item, index) {\n    var reinsertRecord = this._removedItems.get(item);\n    if (reinsertRecord !== null) {\n      record = this._collection_reinsertAfter(reinsertRecord, record._prevRec, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._moves_add(record);\n    }\n    return record;\n  }\n  /**\n   * Get rid of any excess [ItemRecord]s from the previous collection\n   *\n   * - [record] The first excess [ItemRecord].\n   */\n  _truncate(record) {\n    // Anything after that needs to be removed;\n    while(record !== null) {\n      var nextRecord = record._nextRec;\n      this._removals_add(this._collection_unlink(record));\n      record = nextRecord;\n    }\n    this._removedItems.clear();\n  }\n  _collection_reinsertAfter(record, insertPrev, index) {\n    this._removedItems.remove(record);\n    var prev = record._prevRemovedRec;\n    var next = record._nextRemovedRec;\n    // TODO: Traceur assertions... also wat.\n    //assert((record._prevRemovedRec = null) == null);\n    //assert((record._nextRemovedRec = null) == null);\n    record._prevRemovedRec = record._nextRemovedRec = null;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemovedRec = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemovedRec = prev;\n    }\n    this._collection_insertAfter(record, insertPrev, index);\n    this._moves_add(record);\n    return record;\n  }\n  _collection_moveAfter(record, prev, index) {\n    this._collection_unlink(record);\n    this._collection_insertAfter(record, prev, index);\n    this._moves_add(record);\n    return record;\n  }\n  _collection_addAfter(record, prev, index) {\n    this._collection_insertAfter(record, prev, index);\n    if (this._additionsTail === null) {\n      // TODO: Traceur assertions\n      //assert(_additionsHead == null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO: Traceur assertions\n      //assert(_additionsTail._nextAddedRec == null);\n      //assert(record._nextAddedRec == null);\n      this._additionsTail = this._additionsTail._nextAddedRec = record;\n    }\n    return record;\n  }\n  _collection_insertAfter(record, prev, index) {\n    // TODO: Traceur assertions\n    // assert(record != prev);\n    // assert(record._nextRec == null);\n    // assert(record._prevRec == null);\n    var next = prev === null ? this._collectionHead : prev._nextRec;\n    // TODO: Traceur assertions\n    //assert(next != record);\n    //assert(prev != record);\n    record._nextRec = next;\n    record._prevRec = prev;\n    if (next === null) {\n      this._collectionTail = record;\n    } else {\n      next._prevRec = record;\n    }\n    if (prev === null) {\n      this._collectionHead = record;\n    } else {\n      prev._nextRec = record;\n    }\n    this._items.put(record);\n    record.currentIndex = index;\n    return record;\n  }\n  _collection_remove(record) {\n    this._removals_add(this._collection_unlink(record));\n  }\n  _collection_unlink(record) {\n    this._items.remove(record);\n    var prev = record._prevRec;\n    var next = record._nextRec;\n    // TODO: Traceur assertions. wat.\n    //assert((record._prevRec = null) == null);\n    //assert((record._nextRec = null) == null);\n    record._prevRec = record._nextRec = null;\n    if (prev === null) {\n      this._collectionHead = next;\n    } else {\n      prev._nextRec = next;\n    }\n    if (next === null) {\n      this._collectionTail = prev;\n    } else {\n      next._prevRec = prev;\n    }\n    return record;\n  }\n  _moves_add(record) {\n    // TODO: Traceur assertions\n    //assert(record._nextMovedRec == null);\n    if (this._movesTail === null) {\n      // TODO: Traceur assertions\n      //assert(_movesHead == null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO: Traceur assertions\n      // assert(_movesTail._nextMovedRec == null);\n      this._movesTail = this._movesTail._nextMovedRec = record;\n    }\n    return record;\n  }\n  _removals_add(record) {\n    record.currentIndex = null;\n    this._removedItems.put(record);\n    if (this._removalsTail === null) {\n      // TODO: Traceur assertions\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n    } else {\n      // TODO: Traceur assertions\n      // assert(_removalsTail._nextRemovedRec == null);\n      // assert(record._nextRemovedRec == null);\n      record._prevRemovedRec = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemovedRec = record;\n    }\n    return record;\n  }\n  toString() {\n    var record;\n    var list = [];\n    record = this._collectionHead;\n    while(record !== null) {\n      list.push(record);\n      record = record._nextRec;\n    }\n    var additions = [];\n    record = this._additionsHead;\n    while(record !== null) {\n      additions.push(record);\n      record = record._nextAddedRec;\n    }\n    var moves = [];\n    record = this._movesHead;\n    while(record !== null) {\n      moves.push(record);\n      record = record._nextMovedRec;\n    }\n    var removals = [];\n    record = this._removalsHead;\n    while(record !== null) {\n      removals.push(record);\n      record = record._nextRemovedRec;\n    }\n    return \"collection: \" + list.join(', ') + \"\\n\" +\n           \"additions: \" + additions.join(', ') + \"\\n\" +\n           \"moves: \" + moves.join(', ') + \"\\n\" +\n           \"removals: \" + removals.join(', ') + \"\\n\";\n  }\n}\nclass ItemRecord extends CollectionChangeItem {\n  constructor(item) {\n    this.item = item;\n    this.previousIndex = this.currentIndex = null;\n    this._prevRec = this._nextRec = null;\n    this._prevDupRec = this._nextDupRec = null;\n    this._prevRemovedRec = this._nextRemovedRec = null;\n    this._nextAddedRec = this._nextMovedRec = null;\n  }\n  get nextCollectionItem() {\n    return this._nextRec;\n  }\n  get nextRemovedItem() {\n    return this._nextRemovedRec;\n  }\n  get nextAddedItem() {\n    return this._nextAddedRec;\n  }\n  get nextMovedItem() {\n    return this._nextMovedRec;\n  }\n  toString() {\n    return this.previousIndex === this.currentIndex\n      ? '' + this.item\n      : this.item + '[' + this.previousIndex + ' -> ' + this.currentIndex + ']';\n  }\n}\nclass _DuplicateItemRecordList {\n  constructor() {\n    this.head = this.tail = null;\n  }\n  add(record, beforeRecord) {\n    // TODO: Traceur assertions\n    // assert(record._prevDupRec == null);\n    // assert(record._nextDupRec == null);\n    // assert(beforeRecord == null ? true : beforeRecord.item == record.item);\n    if (this.head === null) {\n      //assert(beforeRecord == null);\n      this.head = this.tail = record;\n    } else {\n      // TODO: Traceur assertions\n      //assert(record.item === head.item);\n      if (beforeRecord === null) {\n        this.tail._nextDupRec = record;\n        record._prevDupRec = this.tail;\n        this.tail = record;\n      } else {\n        var prev = beforeRecord._prevDupRec;\n        var next = beforeRecord;\n        record._prevDupRec = prev;\n        record._nextDupRec = next;\n        if (prev === null) {\n          this.head = record;\n        } else {\n          prev._nextDupRec = record;\n        }\n        next._prevDupRec = record;\n      }\n    }\n  }\n  get(key, hideIndex) {\n    var record = this.head;\n    if (typeof hideIndex !== \"number\") hideIndex = null;\n    while(record !== null) {\n      if (hideIndex === null ||\n          hideIndex < record.currentIndex && record.item === key) {\n        return record;\n      }\n      record = record._nextDupRec;\n    }\n    return record;\n  }\n  remove(record) {\n    // TODO: Add assertion to ensure that the record is within the list.\n    // Since this is a private API, this may not be necessary, but it should assist in ensuring\n    // that the routine (and library) behaves correctly.\n    var prev = record._prevDupRec;\n    var next = record._nextDupRec;\n    if (prev === null) {\n      this.head = next;\n    } else {\n      prev._nextDupRec = next;\n    }\n    if (next === null) {\n      this.tail = prev;\n    } else {\n      next._prevDupRec = prev;\n    }\n    // TODO: Traceur assertions\n    // These assertions look incorrect to me, if Dart/ECMAScript operator precedence is anything\n    // like C/C++ (which, to my knowledge, it is)\n    // assert((record._prevDupRec = null) == null);\n    // assert((record._nextDupRec = null) == null);\n    record._prevDupRec = record._nextDupRec = null;\n    return this.head === null;\n  }\n}\nclass DuplicateMap {\n  constructor() {\n    // For an identical behaviour to the Dart implementation, a Map or WeakMap is required. However,\n    // I'm not decided on whether a WeakMap would be more appropriate or not. While it is\n    // not desirable to construct new objects, it may be necessary in this case. This could\n    // be too much pressure on the GC, so refactoring is something which is quite likely to\n    // occur here.\n    this._map = new Map();\n  }\n  put(record, beforeRecord) {\n    if (arguments.length === 1) beforeRecord = null;\n    // TODO: traceur assert\n    // assert(record._nextDupRec === null)\n    // assert(record._prevDupRec === null)\n    var list;\n    if (!(list = this._map.get(record.item)))\n      this._map.set(record.item, list = new _DuplicateItemRecordList());\n    list.add(record, beforeRecord);\n  }\n  get(key, hideIndex) {\n    var list = this._map.get(key);\n    return !(list instanceof _DuplicateItemRecordList) ? null : list.get(key, hideIndex);\n  }\n  remove(record) {\n    var list = this._map.get(record.item);\n    // TODO: traceur assert()\n    // assert(list != null)\n    if (list.remove(record)) this._map.delete(record.item);\n    return record;\n  }\n  clear() {\n    this._map.clear();\n  }\n}\n","function($__placeholder__0) {\n      $__placeholder__1\n    }","var __moduleName = $__placeholder__0;","if (!$__placeholder__0 || !$__placeholder__1.__esModule)\n            $__placeholder__2 = { 'default': $__placeholder__3 }","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2)","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                       $__placeholder__3)","$traceurRuntime.superCall($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                   $__placeholder__3)","return $__placeholder__0","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true"]}