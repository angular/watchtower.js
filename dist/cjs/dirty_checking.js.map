{"version":3,"file":"dirty_checking.js","sources":["dirty_checking.js","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/15","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/12","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/17","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/16"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetector,\n  ChangeDetectorGroup,\n  ChangeRecord,\n  MapChangeRecord,\n  MapKeyValue,\n  CollectionChangeRecord,\n  CollectionChangeItem\n} from './change_detection';\n/**\n * these cannot currently be defined in the DirtyCheckingRecord class itself,\n * unfortunately. They've been moved outside and de-const-ified for this\n * reason. When a better approach is found, it will be used instead.\n */\nvar _MODE_NAMES = [\n  'MARKER', 'IDENT', 'REFLECT', 'GETTER', 'MAP[]', 'ITERABLE', 'MAP'\n];\nvar _MODE_MARKER_ = 0;\nvar _MODE_IDENTITY_ = 1;\nvar _MODE_REFLECT_ = 2;\nvar _MODE_GETTER_ = 3;\nvar _MODE_MAP_FIELD_ = 4;\nvar _MODE_ITERABLE_ = 5;\nvar _MODE_MAP_ = 6;\nvar _MODE_MAP_FIELD_NOTIFY_ONLY_= 10;\nexport class GetterCache {\n  constructor(map) {\n    this._map = map;\n  }\n  get(field) {\n    return this._map[field] || null;\n  }\n}\nexport class DirtyCheckingChangeDetectorGroup extends ChangeDetector {\n  constructor(parent, cache) {\n    this._parent = parent;\n    this._getterCache = cache;\n    this._marker = DirtyCheckingRecord.marker();\n    this._childHead = this._childTail = this._next = this._prev = null;\n    if (parent === null) {\n      this._recordHead = this._recordTail = this._marker;\n    } else {\n      this._recordTail = this._parent._childInclRecordTail;\n      this._recordHead = this._recordTail = this._recordAdd(this._marker);\n    }\n  }\n  watch(context, field, handler) {\n    // assert(_root != null); // prove that we are not deleted connected;\n    var getter = field === null ? null : this._getterCache.get(field);\n    return this._recordAdd(new DirtyCheckingRecord(this, context, field, getter, handler));\n  }\n  remove() {\n    var root = this._root;\n    // TODO: Traceur assertions\n    // assert((root = _root) != null);\n    // assert(root._assertRecordsOk());\n    var prevRecord = this._recordHead._prevRecord;\n    var nextRecord = this._childInclRecordTail._nextRecord;\n    if (prevRecord !== null) prevRecord._nextRecord = nextRecord;\n    if (nextRecord !== null) nextRecord._prevRecord = prevRecord;\n    var cursor = this._recordHead;\n    while(cursor != nextRecord) {\n      cursor = cursor._nextRecord;\n    }\n    var prevGroup = this._prev;\n    var nextGroup = this._next;\n    if (prevGroup === null) {\n      this._parent._childHead = nextGroup;\n    } else {\n      prevGroup._next = nextGroup;\n    }\n    if (nextGroup === null) {\n      this._parent._childTail = prevGroup;\n    } else {\n      nextGroup._prev = prevGroup;\n    }\n    this._parent = null;\n    this._prev = this._next = null;\n    this._recordHead._prev = null;\n    this._recordTail._prev = null;\n    this._recordHead = this._recordTail = null;\n\n    // TODO: Traceur assertions\n    // assert(root._assertRecordsOk());\n  }\n  _recordAdd(record) {\n    var previous = this._recordTail,\n        next = previous === null ? null : previous._nextRecord;\n    record._nextRecord = next;\n    record._prevRecord = previous;\n    if (previous !== null) previous._nextRecord = record;\n    if (next !== null) next._prevRecord = record;\n    this._recordTail = record;\n    if (previous === this._marker) this._recordRemove(this._marker);\n    return record;\n  }\n  _recordRemove(record) {\n    var previous = record._prevRecord,\n        next = record._nextRecord;\n    if (record === this._recordHead && record === this._recordTail) {\n      // we are the last one, must leave marker behind.\n      this._recordHead = this._recordTail = this._marker;\n      this._marker._nextRecord = next;\n      this._marker._prevRecord = previous;\n      if (previous !== null) previous._nextRecord = this._marker;\n      if (next !== null) next._prevRecord = this._marker;\n    } else {\n      if (record === this._recordTail) this._recordTail = previous;\n      if (record === this._recordHead) this._recordHead = next;\n      if (previous !== null) previous._nextRecord = next;\n      if (next !== null) next._prevRecord = previous;\n    }\n  }\n  newGroup() {\n    // TODO: Traceur assertions\n    // assert(_root._assertRecordsOk());\n    var child = new DirtyCheckingChangeDetectorGroup(this, this._getterCache);\n    if (this._childHead === null) {\n      this._childHead = this._childTail = child;\n    } else {\n      child._prev = this._childTail;\n      this._childTail._next = child;\n      this._childTail = child;\n    }\n    // TODO: Traceur assertions\n    // assert(_root._assertRecordsOk());\n    return child;\n  }\n  get _root() {\n    var root = this, next;\n    while ((next = root._parent) !== null) {\n      root = next;\n    }\n    return (root instanceof DirtyCheckingChangeDetector) ? root : null;\n  }\n  get _childInclRecordTail() {\n    var tail = this, nextTail;\n    while ((nextTail = tail._childTail) !== null) {\n      tail = nextTail;\n    }\n    return tail._recordTail;\n  }\n  get count() {\n    var count = 0,\n        cursor = this._recordHead,\n        end = this._childInclRecordTail;\n    while (cursor !== null) {\n      if (cursor._mode !== _MODE_MARKER_) {\n        ++count;\n      }\n      if (cursor === end) break;\n      cursor = cursor._nextRecord;\n    }\n    return count;\n  }\n  toString() {\n    var lines = [],\n        record,\n        records,\n        recordTail,\n        childGroup;\n    if (this._parent === null) {\n      var allRecords = [];\n      record = this._recordHead;\n      var includeChildrenTail = this._childInclRecordTail;\n      do {\n        allRecords.push(record.toString());\n        record = record._nextRecord;\n      } while (record !== includeChildrenTail);\n      lines.push(\"FIELDS: \" + allRecords.join(', '));\n    }\n    records = [];\n    record = this._recordHead;\n    recordTail = this._recordTail;\n    while (record !== recordTail) {\n      records.push(record.toString());\n      record = record._nextRecord;\n    }\n    records.add(record.toString());\n    lines.add(\"DirtyCheckingChangeDetectorGroup(fields: \" + records.join(', ') + \")\");\n    childGroup = this._childHead;\n    while (childGroup !== null) {\n      lines.push('  ' + childGroup.toString().split('\\n').join('\\n  '));\n      childGroup = childGroup._next;\n    }\n    return lines.join('\\n');\n  }\n}\nexport class DirtyCheckingChangeDetector extends DirtyCheckingChangeDetectorGroup {\n  constructor(cache, notifier = new ChangeNotifier()) {\n    super(null, cache);\n    this._fakeHead = DirtyCheckingRecord.marker();\n    this._notifier = notifier;\n  }\n\n  _assertRecordsOk() {\n    var record = this._recordHead,\n        groups = [this],\n        group;\n    while (groups.length) {\n      group = groups.shift();\n      var childGroup = group._childTail;\n      while (childGroup !== null) {\n        groups.unshift(childGroup);\n        childGroup = childGroup._prev;\n      }\n      var groupRecord = group._recordHead,\n          groupTail = group._recordTail;\n      while (true) {\n        if (groupRecord === record) record = record._nextRecord;\n        else throw \"lost: \" + record + \" found \" + groupRecord + \"\\n\" + this;\n        if (groupRecord === groupTail) break;\n        groupRecord = groupRecord._nextRecord;\n      }\n    }\n    return true;\n  }\n  collectChanges(exceptionHandler, stopwatch) {\n    if (stopwatch) stopwatch.start();\n    var changeTail = this._fakeHead,\n        current = this._recordHead,\n        count = 0;\n    while (current !== null) {\n      try {\n        if (current.check()) {\n          changeTail = changeTail._nextChange = current;\n        }\n        ++count;\n      } catch (e) {\n        if (exceptionHandler) {\n          exceptionHandler(e);\n        } else {\n          throw e;\n        }\n      }\n      current = current._nextRecord;\n    }\n    changeTail._nextChange = null;\n    if (stopwatch) {\n      stopwatch.stop();\n      stopwatch.increment(count);\n    }\n    var changeHead = this._fakeHead._nextChange;\n    this._fakeHead._nextChange = null;\n    return new ChangeIterator(changeHead);\n  }\n  remove() {\n    throw \"Root ChangeDetector can not be removed\";\n  }\n  get _root() {\n    return this;\n  }\n}\n\nclass ChangeIterator {\n  constructor(next) {\n    this._current = null;\n    this._next = next;\n  }\n\n  get current() {\n    return this._current;\n  }\n\n  iterate() {\n    this._current = this._next;\n    if (this._next !== null) {\n      this._next = this._current._nextChange;\n\n      /**\n       * This is important to prevent memory leaks. If the nextChange record is not reset, then a\n       * record may be pointing to a deleted change detector group, and it will not release the\n       * reference until it fires again. So we have to be eager about releasing references.\n       */\n      this._current._nextChange = null;\n    }\n    return this._current !== null;\n  }\n}\n\n\nexport class ChangeNotifier {\n  constructor() {\n    this.objectRecords = new WeakMap();\n  }\n  notify(object) {\n    var records = this.objectRecords.get(object) || [];\n    records.forEach((record) => {\n      // TODO: Is this the correct way of manually dirty checking\n      // some records??\n      var watch = record._handler._watchHead;\n      if (record.check(true)) {\n        watch._dirty = true;\n      }\n      watch.invoke();\n    });\n  }\n  isNotifyOnly(object, fieldName) {\n    return false;\n  }\n  addWatch(object, fieldName, record) {\n    var records = this.objectRecords.get(object);\n    if (!records) {\n      records = [];\n      this.objectRecords.set(object, records);\n    }\n    records.push(record);\n    return records.length;\n  }\n  removeWatch(object, fieldName, record) {\n    var records = this.objectRecords.get(object);\n    if (records) {\n      var index = records.indexOf(record);\n      if (index !== -1) {\n        records.splice(index, 1);\n      }\n    }\n    return records ? records.length : 0;\n  }\n}\n\nclass DirtyCheckingRecord extends ChangeRecord {\n  constructor(group, object, fieldName, getter, handler) {\n    this._group = group;\n    this._getter = getter;\n    this._handler = handler;\n    this._field = fieldName;\n    // Do we really need reflection here?\n    // this._symbol = fieldName === null ? null : new Symbol(fieldName);\n    this.object = object;\n    this._nextRecord = this._prevRecord = this._nextChange = null;\n  }\n  static marker() {\n    var record = new DirtyCheckingRecord(null, null, null, null, null);\n    record._mode = _MODE_MARKER_;\n    return record;\n  }\n  get nextChange() {\n    return this._nextChange;\n  }\n  get field() {\n    return this._field;\n  }\n  get handler() {\n    return this._handler;\n  }\n  set handler(handler) {\n    this._handler = handler;\n  }\n  get object() {\n    return this._object;\n  }\n  _clearObject() {\n    var notifier = this._group && this._group._root._notifier;\n    if (notifier && this._object && (\n        this._mode === _MODE_MAP_FIELD_NOTIFY_ONLY_ || this._mode === _MODE_MAP_FIELD_)\n      ) {\n      notifier.removeWatch(this._object, this._field, this);\n    }\n    this._object = null;\n  }\n  set object(obj) {\n    this._clearObject(obj);\n    this._object = obj;\n    if (obj === null) {\n      this._mode = _MODE_IDENTITY_;\n      return;\n    }\n    if (this.field === null) {\n      // _instanceMirror = null; --- Again, do we need reflection?\n      if (typeof obj === \"object\") {\n        if (Array.isArray(obj)) { // TODO: Browser compat, cross-script context support, perf\n          if (this._mode !== _MODE_ITERABLE_) {\n            // Last one was collection as well, don't reset state.\n            this._mode = _MODE_ITERABLE_;\n            this.currentValue = new _CollectionChangeRecord();\n          }\n        } else if (this._mode !== _MODE_MAP_) {\n          // Last one was collection as well, don't reset state.\n          this._mode = _MODE_MAP_;\n          this.currentValue = new _MapChangeRecord();\n        }\n      } else {\n        this._mode = _MODE_IDENTITY_;\n      }\n      return;\n    }\n    if (typeof obj === \"object\") {\n      var notifier = this._group && this._group._root._notifier;\n      if (notifier && notifier.isNotifyOnly(obj, this._field)) {\n        this._mode = _MODE_MAP_FIELD_NOTIFY_ONLY_;\n      } else {\n        this._mode = _MODE_MAP_FIELD_;\n      }\n      notifier.addWatch(obj, this._field, this);\n      // _instanceMirror = null; --- Reflection needed?\n    } else if (this._getter !== null) {\n      this._mode = _MODE_GETTER_;\n      // _instanceMirror = null; --- Reflection needed?\n    } else {\n      this._mode = _MODE_REFLECT_;\n      // _instanceMirror = reflect(obj); --- I'm really not sure about this!\n    }\n  }\n  check(inNotify) {\n    // assert(_mode != null); --- Traceur v0.0.24 missing assert()\n    var current;\n    switch (this._mode) {\n      case _MODE_MARKER_: return false;\n      case _MODE_REFLECT_:\n        // TODO:\n        // I'm not sure how much support for Reflection is available in Traceur\n        // just yet, but I will look into this later...\n        // current = _instanceMirror.getField(_symbol).reflectee;\n        current = this.object[this.field];\n        break;\n      case _MODE_GETTER_:\n        current = this._getter(this.object);\n        break;\n      case _MODE_MAP_FIELD_NOTIFY_ONLY_:\n        if (inNotify) {\n          current = this.object[this.field];\n        } else {\n          return false;\n        }\n        break;\n      case _MODE_MAP_FIELD_:\n        current = this.object[this.field];\n        break;\n      case _MODE_IDENTITY_:\n        current = this.object;\n        break;\n      case _MODE_MAP_:\n      case _MODE_ITERABLE_:\n        return this.currentValue._check(this.object);\n      default:\n        throw \"UNREACHABLE\";\n        // assert(false); --- Traceur 0.0.24 missing assert()\n    }\n    var last = this.currentValue;\n    if (last !== current) {\n      // TODO:\n      // I'm fairly sure we don't have this issue in JS, with the exception of non-primitive\n      // Strings. However, I'll look into this.\n      //\n      //if (typeof last === \"string\" && typeof current === \"string\" && last === current) {\n      // This is false change in strings we need to recover, and pretend it\n      // is the same. We save the value so that next time identity will pass\n      //currentValue = current;\n      //} else\n      if (!((typeof last === \"number\" && last !== last) &&\n          (typeof current === \"number\" && current !== current))) {\n        // Ignore NaN -> NaN changes\n        this.previousValue = last;\n        this.currentValue = current;\n        return true;\n      }\n    }\n    return false;\n  }\n  remove() {\n    // TODO: This is not called when a WatchGroup is destroyed.\n    // TODO: Should also be called when a parent WatchGroup is destroyed!\n    this._clearObject();\n    this._group._recordRemove(this);\n  }\n  toString() {\n    // Where the heck is hashCode from?\n    var hashCode = 0;\n    return _MODE_NAMES[this._mode] + '[' + this.field + ']{' + hashCode + '}';\n  }\n}\nclass _MapChangeRecord extends MapChangeRecord {\n  constructor() {\n    this._records = {}; // WeakMap perhaps?\n    this._map = {};\n    this._mapHead = null;\n    this._changesHead = this._changesTail = null;\n    this._additionsHead = this._additionsTail = null;\n    this._removalsHead = this._removalsTail = null;\n  }\n  get map() {\n    return this._map;\n  }\n  get mapHead() {\n    return this._mapHead;\n  }\n  get changesHead() {\n    return this._changesHead;\n  }\n  get additionsHead() {\n    return this._additionsHead;\n  }\n  get removalsHead() {\n    return this._removalsHead;\n  }\n  get isDirty() {\n    return this._additionsHead !== null ||\n           this._changesHead !== null ||\n           this._removalsHead !== null;\n  }\n  forEachChange(fn) {\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._changesHead;\n    while (record !== null) {\n      fn(record);\n      record = record._nextChangedKeyValue;\n    }\n  }\n  forEachAddition(fn) {\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._additionsHead;\n    while (record !== null) {\n      fn(record);\n      record = record._nextAddedKeyValue;\n    }\n  }\n  forEachRemoval(fn) {\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._removalsHead;\n    while (record !== null) {\n      fn(record);\n      record = record._nextRemovedKeyValue;\n    }\n  }\n  _check(map) {\n    this._reset();\n    this._map = map;\n    var records = this._records;\n    var oldSeqRecord = this._mapHead;\n    var lastOldSeqRecord = null, lastNewSeqRecord = null;\n    var seqChanged = false;\n    // TODO: Use getOwnPropertyNames instead?\n    var keys = Object.keys(map);\n    for (var i = 0, ii = keys.length; i < ii; ++i) {\n      var key = keys[i], value = map[key], newSeqRecord = null;\n      if (oldSeqRecord !== null && key === oldSeqRecord.key) {\n        newSeqRecord = oldSeqRecord;\n        if (value !== oldSeqRecord._currentValue) {\n          var prev = oldSeqRecord._previousValue = oldSeqRecord._currentValue;\n          oldSeqRecord._currentValue = value;\n          if (!((typeof prev === \"number\" && prev !== prev) &&\n              (typeof value === \"number\" && value !== value))) {\n            // Ignore NaN -> NaN changes\n            this._addToChanges(oldSeqRecord);\n          }\n        }\n      } else {\n        seqChanged = true;\n        if (oldSeqRecord !== null) {\n          this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n          this._addToRemovals(oldSeqRecord);\n        }\n        if (records.hasOwnProperty(key)) {\n          newSeqRecord = records[key];\n        } else {\n          newSeqRecord = records[key] = new KeyValueRecord(key);\n          newSeqRecord._currentValue = value;\n          this._addToAdditions(newSeqRecord);\n        }\n      }\n      if (seqChanged) {\n        if (this._isInRemovals(newSeqRecord)) {\n          this._removeFromRemovals(newSeqRecord);\n        }\n        if (lastNewSeqRecord === null) {\n          this._mapHead = newSeqRecord;\n        } else {\n          lastNewSeqRecord._nextKeyValue = newSeqRecord;\n        }\n      }\n      lastOldSeqRecord = oldSeqRecord;\n      lastNewSeqRecord = newSeqRecord;\n      oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._nextKeyValue;\n    }\n    this._truncate(lastOldSeqRecord, oldSeqRecord);\n    return this.isDirty;\n  }\n  _reset() {\n    var record = this._changesHead,\n        nextRecord;\n    while (record !== null) {\n      nextRecord = record._nextChangedKeyValue;\n      record._previousValue = record._currentValue;\n      record._nextChangedKeyValue = null;\n      record = nextRecord;\n    }\n    record = this._additionsHead;\n    while (record !== null) {\n      nextRecord = record._nextAddedKeyValue;\n      record._previousValue = record._currentValue;\n      record._nextAddedKeyValue = null;\n      record = nextRecord;\n    }\n    record = this._removalsHead;\n    while (record !== null) {\n      nextRecord = record._nextRemovedKeyValue;\n      record._nextRemovedKeyValue = null;\n      record = nextRecord;\n    }\n    this._changesHead = this._changesTail = null;\n    this._additionsHead = this._additionsTail = null;\n    this._removalsHead = this._removalsTail = null;\n  }\n  _truncate(lastRecord, record) {\n    while (record !== null) {\n      if (lastRecord === null) {\n        this._mapHead = null;\n      } else {\n        lastRecord._nextKeyValue = null;\n      }\n      var nextRecord = record._nextKeyValue;\n      record._nextKeyValue = null;\n      this._addToRemovals(record);\n      lastRecord = record;\n      record = nextRecord;\n    }\n    record = this._removalsHead;\n    while (record !== null) {\n      record._previousValue = record._currentValue;\n      record._currentValue = null;\n      delete this._records[record.key];\n      record = record._nextRemovedKeyValue;\n    }\n  }\n  _isInRemovals(record) {\n    return record === this._removalsHead ||\n           record._nextRemovedKeyValue !== null ||\n           record._prevRemovedKeyValue !== null;\n  }\n  _addToRemovals(record) {\n    // TODO: traceur assertions\n    // assert(record._nextKeyValue === null);\n    // assert(record._nextAddedKeyValue === null);\n    // assert(record._nextChangedKeyValue === null);\n    // assert(record._nextRemovedKeyValue === null);\n    // assert(record._prevRemovedKeyValue === null);\n    if (this._removalsHead === null) {\n      this._removalsHead = this._removalsTail = record;\n    } else {\n      this._removalsTail._nextRemovedKeyValue = record;\n      record._prevRemovedKeyValue = this._removalsTail;\n      this._removalsTail = record;\n    }\n  }\n  _removeFromSeq(prev, record) {\n    var next = record._nextKeyValue;\n    if (prev === null) {\n      this._mapHead = next;\n    } else {\n      prev._nextKeyValue = next;\n    }\n    record._nextKeyValue = null;\n  }\n  _removeFromRemovals(record) {\n    // TODO: traceur assertions\n    // assert(record._nextKeyValue === null)\n    // assert(record._nextAddedKeyValue === null)\n    // assert(record._nextChangedKeyValue === null)\n    var prev = record._prevRemovedKeyValue,\n        next = record._nextRemovedKeyValue;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemovedKeyValue = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemovedKeyValue = prev;\n    }\n    record._prevRemovedKeyValue = record._nextRemovedKeyValue = null;\n  }\n  _addToAdditions(record) {\n    // TODO: traceur assertions\n    // assert(record._nextKeyValue === null)\n    // assert(record._nextAddedKeyValue === null)\n    // assert(record._nextChangedKeyValue === null)\n    // assert(record._nextRemovedKeyValue === null)\n    // assert(record._prevRemovedKeyValue === null)\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail._nextAddedKeyValue = record;\n      this._additionsTail = record;\n    }\n  }\n  _addToChanges(record) {\n    // TODO: traceur assertions\n    // assert(record._nextAddedKeyValue === null)\n    // assert(record._nextChangedKeyValue === null)\n    // assert(record._nextRemovedKeyValue === null)\n    // assert(record._prevRemovedKeyValue === null)\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail._nextChangedKeyValue = record;\n      this._changesTail = record;\n    }\n  }\n}\nclass KeyValueRecord extends MapKeyValue {\n  constructor(key) {\n    this._key = key;\n    this._previousValue = this._currentValue = null;\n    this._nextKeyValue = this._nextAddedKeyValue = this._nextChangedKeyValue = null;\n    this._nextRemovedKeyValue = this._prevRemovedKeyValue = null;\n  }\n  get key() {\n    return this._key;\n  }\n  get previousValue() {\n    return this._previousValue;\n  }\n  get currentValue() {\n    return this._currentValue;\n  }\n  get nextKeyValue() {\n    return this._nextKeyValue;\n  }\n  get nextAddedKeyValue() {\n    return this._nextAddedKeyValue;\n  }\n  get nextRemovedKeyValue() {\n    return this._nextRemovedKeyValue;\n  }\n  get nextChangedKeyValue() {\n    return this._nextChangedKeyValue;\n  }\n  toString() {\n    return this._previousValue === this._currentValue\n          ? this._key\n          : this._key + '[' + this._previousValue + ' -> ' + this._currentValue + ']';\n  }\n}\nclass _CollectionChangeRecord extends CollectionChangeRecord {\n  constructor() {\n    this._iterable = null;\n    this._items = new DuplicateMap();\n    this._removedItems = new DuplicateMap();\n    this._collectionHead = this._collectionTail = null;\n    this._additionsHead = this._additionsTail = null;\n    this._movesHead = this._movesTail = null;\n    this._removalsHead = this._removalsTail = null;\n  }\n  get collectionHead() {\n    return this._collectionHead;\n  }\n  get additionsHead() {\n    return this._additionsHead;\n  }\n  get movesHead() {\n    return this._movesHead;\n  }\n  get removalsHead() {\n    return this._removalsHead;\n  }\n  forEachAddition(fn){\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._additionsHead;\n    while(record !== null) {\n      fn(record);\n      record = record._nextAddedRec;\n    }\n  }\n  forEachMove(fn) {\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._movesHead;\n    while(record !== null) {\n      fn(record);\n      record = record._nextMovedRec;\n    }\n  }\n  forEachRemoval(fn){\n    // TODO: assert(typeof fn === \"function\" && fn.length === 1)\n    var record = this._removalsHead;\n    while(record !== null) {\n      fn(record);\n      record = record._nextRemovedRec;\n    }\n  }\n  get iterable() {\n    return this._iterable;\n  }\n  _check(collection) {\n    this._reset();\n    var record = this._collectionHead,\n        maybeDirty = false,\n        index,\n        end,\n        item;\n    // TODO: Optimization for frozen arrays / sets / iteratables\n    // if ((collection is UnmodifiableListView) && identical(_iterable, collection)) {\n      // Short circuit and assume that the list has not been modified.\n    //  return false;\n    // }\n    if (Array.isArray(collection)) {\n      // TODO:\n      // Is a separate branch for Array really needed, if the object is known to be\n      // iterable? In the current implementation, the other branch will never be\n      // executed, so this shouldn't hurt. But it also causes problems for other\n      // ES6 iterable types (using generators or custom iterators)\n      var list = collection;\n      for (index = 0, end = list.length; index < end; index++) {\n        item = list[index];\n        if (record === null || item !== record.item) {\n          record = this.mismatch(record, item, index);\n          maybeDirty = true;\n        } else if (maybeDirty) {\n          // TODO(misko): can we limit this to duplicates only?\n          record = this.verifyReinsertion(record, item, index);\n        }\n        record = record._nextRec;\n      }\n    } else {\n      index = 0;\n      for (item in collection) {\n        if (record === null || item !== record.item) {\n          record = this.mismatch(record, item, index);\n          maybeDirty = true;\n        } else if (maybeDirty) {\n          // TODO(misko): can we limit this to duplicates only?\n          record = this.verifyReinsertion(record, item, index);\n        }\n        record = record._nextRec;\n        index++;\n      }\n    }\n    this._truncate(record);\n    this._iterable = collection;\n    return this.isDirty;\n  }\n  /**\n   * Reset the state of the change objects to show no changes. This means set\n   * previousKey to currentKey, and clear all of the queues (additions, moves,\n   * removals).\n   */\n  _reset() {\n    var record;\n    record = this._additionsHead;\n    while(record !== null) {\n      record.previousIndex = record.currentIndex;\n      record = record._nextAddedRec;\n    }\n    this._additionsHead = this._additionsTail = null;\n    record = this._movesHead;\n    while(record !== null) {\n      record.previousIndex = record.currentIndex;\n      var nextRecord = record._nextMovedRec;\n      // wat.\n      // assert((record._nextMovedRec = null) == null);\n      record._nextMovedRec = null;\n      record = nextRecord;\n    }\n    this._movesHead = this._movesTail = null;\n    this._removalsHead = this._removalsTail = null;\n    // TODO: Traceur assertions\n    // assert(isDirty == false);\n  }\n  /**\n   * A [_CollectionChangeRecord] is considered dirty if it has additions, moves\n   * or removals.\n   */\n  get isDirty() {\n    return this._additionsHead !== null ||\n           this._movesHead !== null ||\n           this._removalsHead !== null;\n  }\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - [record] is the record which we saw at this position last time. If `null`\n   *   then it is a new item.\n   * - [item] is the current item in the collection\n   * - [index] is the position of the item in the collection\n   */\n  mismatch(record, item, index) {\n    // Guard against bogus String changes\n    if (record !== null) {\n      //if (item is String && record.item is String && record.item == item) {\n      // TODO: This probably doesn't matter in ES6, with the exception of non-primitive Strings.\n      // Figure out a solution for these...\n      if (typeof item === \"string\" && typeof record.item === \"string\" && record.item === item) {\n        // this is false change in strings we need to recover, and pretend it is\n        // the same. We save the value so that next time identity can pass\n        record.item = item;\n        return record;\n      }\n      if ((typeof item === \"number\" && item !== item) &&\n          (typeof record.item === \"number\" && record.item !== record.item)) {\n        // we need this for JavaScript since in JS NaN !== NaN.\n        return record;\n      }\n    }\n    // find the previous record so that we know where to insert after.\n    var prev = record === null ? this._collectionTail : record._prevRec;\n    // Remove the record from the collection since we know it does not match the\n    // item.\n    if (record !== null) this._collection_remove(record);\n    // Attempt to see if we have seen the item before.\n    record = this._items.get(item, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      this._collection_moveAfter(record, prev, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._removedItems.get(item);\n      if (record !== null) {\n        // It is an item which we have earlier evict it, reinsert it back into\n        // the list.\n        this._collection_reinsertAfter(record, prev, index);\n      } else {\n        // It is a new item add it.\n        record = this._collection_addAfter(new ItemRecord(item), prev, index);\n      }\n    }\n    return record;\n  }\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit\n   * of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if\n   * the item type may have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it\n   * will be reinserted at the end. Which will show up as the two 'a's switching\n   * position. This is incorrect, since a better way to think of it is as insert\n   * of 'b' rather then switch 'a' with 'b' and then add 'a' at the end.\n   */\n  verifyReinsertion(record, item, index) {\n    var reinsertRecord = this._removedItems.get(item);\n    if (reinsertRecord !== null) {\n      record = this._collection_reinsertAfter(reinsertRecord, record._prevRec, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._moves_add(record);\n    }\n    return record;\n  }\n  /**\n   * Get rid of any excess [ItemRecord]s from the previous collection\n   *\n   * - [record] The first excess [ItemRecord].\n   */\n  _truncate(record) {\n    // Anything after that needs to be removed;\n    while(record !== null) {\n      var nextRecord = record._nextRec;\n      this._removals_add(this._collection_unlink(record));\n      record = nextRecord;\n    }\n    this._removedItems.clear();\n  }\n  _collection_reinsertAfter(record, insertPrev, index) {\n    this._removedItems.remove(record);\n    var prev = record._prevRemovedRec;\n    var next = record._nextRemovedRec;\n    // TODO: Traceur assertions... also wat.\n    //assert((record._prevRemovedRec = null) == null);\n    //assert((record._nextRemovedRec = null) == null);\n    record._prevRemovedRec = record._nextRemovedRec = null;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemovedRec = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemovedRec = prev;\n    }\n    this._collection_insertAfter(record, insertPrev, index);\n    this._moves_add(record);\n    return record;\n  }\n  _collection_moveAfter(record, prev, index) {\n    this._collection_unlink(record);\n    this._collection_insertAfter(record, prev, index);\n    this._moves_add(record);\n    return record;\n  }\n  _collection_addAfter(record, prev, index) {\n    this._collection_insertAfter(record, prev, index);\n    if (this._additionsTail === null) {\n      // TODO: Traceur assertions\n      //assert(_additionsHead == null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO: Traceur assertions\n      //assert(_additionsTail._nextAddedRec == null);\n      //assert(record._nextAddedRec == null);\n      this._additionsTail = this._additionsTail._nextAddedRec = record;\n    }\n    return record;\n  }\n  _collection_insertAfter(record, prev, index) {\n    // TODO: Traceur assertions\n    // assert(record != prev);\n    // assert(record._nextRec == null);\n    // assert(record._prevRec == null);\n    var next = prev === null ? this._collectionHead : prev._nextRec;\n    // TODO: Traceur assertions\n    //assert(next != record);\n    //assert(prev != record);\n    record._nextRec = next;\n    record._prevRec = prev;\n    if (next === null) {\n      this._collectionTail = record;\n    } else {\n      next._prevRec = record;\n    }\n    if (prev === null) {\n      this._collectionHead = record;\n    } else {\n      prev._nextRec = record;\n    }\n    this._items.put(record);\n    record.currentIndex = index;\n    return record;\n  }\n  _collection_remove(record) {\n    this._removals_add(this._collection_unlink(record));\n  }\n  _collection_unlink(record) {\n    this._items.remove(record);\n    var prev = record._prevRec;\n    var next = record._nextRec;\n    // TODO: Traceur assertions. wat.\n    //assert((record._prevRec = null) == null);\n    //assert((record._nextRec = null) == null);\n    record._prevRec = record._nextRec = null;\n    if (prev === null) {\n      this._collectionHead = next;\n    } else {\n      prev._nextRec = next;\n    }\n    if (next === null) {\n      this._collectionTail = prev;\n    } else {\n      next._prevRec = prev;\n    }\n    return record;\n  }\n  _moves_add(record) {\n    // TODO: Traceur assertions\n    //assert(record._nextMovedRec == null);\n    if (this._movesTail === null) {\n      // TODO: Traceur assertions\n      //assert(_movesHead == null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO: Traceur assertions\n      // assert(_movesTail._nextMovedRec == null);\n      this._movesTail = this._movesTail._nextMovedRec = record;\n    }\n    return record;\n  }\n  _removals_add(record) {\n    record.currentIndex = null;\n    this._removedItems.put(record);\n    if (this._removalsTail === null) {\n      // TODO: Traceur assertions\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n    } else {\n      // TODO: Traceur assertions\n      // assert(_removalsTail._nextRemovedRec == null);\n      // assert(record._nextRemovedRec == null);\n      record._prevRemovedRec = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemovedRec = record;\n    }\n    return record;\n  }\n  toString() {\n    var record;\n    var list = [];\n    record = this._collectionHead;\n    while(record !== null) {\n      list.push(record);\n      record = record._nextRec;\n    }\n    var additions = [];\n    record = this._additionsHead;\n    while(record !== null) {\n      additions.push(record);\n      record = record._nextAddedRec;\n    }\n    var moves = [];\n    record = this._movesHead;\n    while(record !== null) {\n      moves.push(record);\n      record = record._nextMovedRec;\n    }\n    var removals = [];\n    record = this._removalsHead;\n    while(record !== null) {\n      removals.push(record);\n      record = record._nextRemovedRec;\n    }\n    return \"collection: \" + list.join(', ') + \"\\n\" +\n           \"additions: \" + additions.join(', ') + \"\\n\" +\n           \"moves: \" + moves.join(', ') + \"\\n\" +\n           \"removals: \" + removals.join(', ') + \"\\n\";\n  }\n}\nclass ItemRecord extends CollectionChangeItem {\n  constructor(item) {\n    this.item = item;\n    this.previousIndex = this.currentIndex = null;\n    this._prevRec = this._nextRec = null;\n    this._prevDupRec = this._nextDupRec = null;\n    this._prevRemovedRec = this._nextRemovedRec = null;\n    this._nextAddedRec = this._nextMovedRec = null;\n  }\n  get nextCollectionItem() {\n    return this._nextRec;\n  }\n  get nextRemovedItem() {\n    return this._nextRemovedRec;\n  }\n  get nextAddedItem() {\n    return this._nextAddedRec;\n  }\n  get nextMovedItem() {\n    return this._nextMovedRec;\n  }\n  toString() {\n    return this.previousIndex === this.currentIndex\n      ? '' + this.item\n      : this.item + '[' + this.previousIndex + ' -> ' + this.currentIndex + ']';\n  }\n}\nclass _DuplicateItemRecordList {\n  constructor() {\n    this.head = this.tail = null;\n  }\n  add(record, beforeRecord) {\n    // TODO: Traceur assertions\n    // assert(record._prevDupRec == null);\n    // assert(record._nextDupRec == null);\n    // assert(beforeRecord == null ? true : beforeRecord.item == record.item);\n    if (this.head === null) {\n      //assert(beforeRecord == null);\n      this.head = this.tail = record;\n    } else {\n      // TODO: Traceur assertions\n      //assert(record.item === head.item);\n      if (beforeRecord === null) {\n        this.tail._nextDupRec = record;\n        record._prevDupRec = this.tail;\n        this.tail = record;\n      } else {\n        var prev = beforeRecord._prevDupRec;\n        var next = beforeRecord;\n        record._prevDupRec = prev;\n        record._nextDupRec = next;\n        if (prev === null) {\n          this.head = record;\n        } else {\n          prev._nextDupRec = record;\n        }\n        next._prevDupRec = record;\n      }\n    }\n  }\n  get(key, hideIndex) {\n    var record = this.head;\n    if (typeof hideIndex !== \"number\") hideIndex = null;\n    while(record !== null) {\n      if (hideIndex === null ||\n          hideIndex < record.currentIndex && record.item === key) {\n        return record;\n      }\n      record = record._nextDupRec;\n    }\n    return record;\n  }\n  remove(record) {\n    // TODO: Add assertion to ensure that the record is within the list.\n    // Since this is a private API, this may not be necessary, but it should assist in ensuring\n    // that the routine (and library) behaves correctly.\n    var prev = record._prevDupRec;\n    var next = record._nextDupRec;\n    if (prev === null) {\n      this.head = next;\n    } else {\n      prev._nextDupRec = next;\n    }\n    if (next === null) {\n      this.tail = prev;\n    } else {\n      next._prevDupRec = prev;\n    }\n    // TODO: Traceur assertions\n    // These assertions look incorrect to me, if Dart/ECMAScript operator precedence is anything\n    // like C/C++ (which, to my knowledge, it is)\n    // assert((record._prevDupRec = null) == null);\n    // assert((record._nextDupRec = null) == null);\n    record._prevDupRec = record._nextDupRec = null;\n    return this.head === null;\n  }\n}\nclass DuplicateMap {\n  constructor() {\n    // For an identical behaviour to the Dart implementation, a Map or WeakMap is required. However,\n    // I'm not decided on whether a WeakMap would be more appropriate or not. While it is\n    // not desirable to construct new objects, it may be necessary in this case. This could\n    // be too much pressure on the GC, so refactoring is something which is quite likely to\n    // occur here.\n    this._map = new Map();\n  }\n  put(record, beforeRecord) {\n    if (arguments.length === 1) beforeRecord = null;\n    // TODO: traceur assert\n    // assert(record._nextDupRec === null)\n    // assert(record._prevDupRec === null)\n    var list;\n    if (!(list = this._map.get(record.item)))\n      this._map.set(record.item, list = new _DuplicateItemRecordList());\n    list.add(record, beforeRecord);\n  }\n  get(key, hideIndex) {\n    var list = this._map.get(key);\n    return !(list instanceof _DuplicateItemRecordList) ? null : list.get(key, hideIndex);\n  }\n  remove(record) {\n    var list = this._map.get(record.item);\n    // TODO: traceur assert()\n    // assert(list != null)\n    if (list.remove(record)) this._map.delete(record.item);\n    return record;\n  }\n  clear() {\n    this._map.clear();\n  }\n}\n","var __moduleName = $__placeholder__0;","require($__placeholder__0)","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2)","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                       $__placeholder__3)","$traceurRuntime.superCall($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                   $__placeholder__3)","module.exports = $__placeholder__0;","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true"]}